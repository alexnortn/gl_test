// switch on high precision floats
// #ifdef GL_ES //UNCOMMENT
precision highp float;
precision highp int;
// #endif //UNCOMMENT

uniform float u_frontier[/*${zcount}*/1/**/];
// uniform float u_max_hop;
uniform float u_feather;

attribute float a_hops;

/*${bpAttrString}*/
attribute vec4 a_backprop0;
/**/

uniform vec3 u_camera_pos;

varying vec4 v_Color;
varying vec3 v_From_Cam;
varying vec3 v_Normal;

uniform mat4 projectionMatrix; //DELETE
uniform mat4 modelViewMatrix; //DELETE
attribute vec3 normal; //DELETE
attribute vec3 position; //DELETE

// Remap value
float remap(float value, float inMin, float inMax, float outMin, float outMax) {
    return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

void main() {
    float amplitude = 0.0; // Create a swelling effect during signal prop

    v_Normal = normal;
    v_From_Cam = u_camera_pos - position;

    float offset = 100000.0;

/*${backpropString}*//**/

    float r = 0.0;

    if (offset < u_feather) {
        r = remap(offset, 0.0, u_feather, 1.0, 0.0);
        // amplitude = r * 100.0; // Experimentally Determined
        // r = 1.0;
    }

    // This for discard
    // if (a_threshold >= u_frontier) {
    // 	r = 1.0;	
    // }
    
    float b = 1.0 - r;

    v_Color = vec4(r,0.0,b,1.0);

    // Multiply our a_displacement by the
    // amplitude. The amp will get animated
    // so we'll have animated a_displacement
    vec3 newPosition = position + 
                        normal * 
                        vec3(amplitude);

    gl_Position = projectionMatrix *
                    modelViewMatrix *
                    vec4(newPosition,1.0);
}